AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Serverless Chatroom application with WebSocket support'

Parameters:
  DomainName:
    Type: String
    Description: 'Domain name for the application (e.g., example.com)'

Mappings:
  EnvironmentConfig:
    Default:
      lambdaMemory: 128
      lambdaTimeout: 3
      nodeRuntime: nodejs18.x
      pythonRuntime: python3.9

Resources:
  # Cognito Resources
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-users'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: !Sub 'auth-${AWS::StackName}'
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${AWS::StackName}-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # API Gateway Resources
  WebApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # WebSocket API
  WebSocketApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub '${AWS::StackName}-websocket'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'

  # DynamoDB Tables
  MessagesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AWS::StackName}-messages'
      AttributeDefinitions:
        - AttributeName: MessageId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: MessageId
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ConnectionsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AWS::StackName}-connections'
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # S3 Resources
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-website'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  WebsiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
          - Sid: SecureTransportOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub 'arn:aws:s3:::${WebsiteBucket}'
              - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
            Condition:
              Bool:
                aws:SecureTransport: false

  LambdaCodeBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-lambda-code'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Resources
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool

  ClientId:
    Description: 'Cognito Client ID'
    Value: !Ref UserPoolClient

  WebApiEndpoint:
    Description: 'REST API Endpoint'
    Value: !Sub 'https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/prod'

  WebSocketApiEndpoint:
    Description: 'WebSocket API Endpoint'
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'

  UserPoolDomainName:
    Description: 'Cognito Domain'
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'

  WebsiteBucketName:
    Description: 'S3 Website Bucket'
    Value: !Ref WebsiteBucket

  WebsiteURL:
    Description: 'S3 Website URL'
    Value: !GetAtt WebsiteBucket.WebsiteURL

  LambdaCodeBucketName:
    Description: 'Lambda Code Bucket'
    Value: !Ref LambdaCodeBucket
